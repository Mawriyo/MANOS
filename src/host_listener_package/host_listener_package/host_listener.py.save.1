#from std_msg.msg import String
import rclpy
from rclpy.node import Node

class Host_Detector(Node):

    def __init__(self):
        super().__init__('host_detector')
        self.ros_topic_list = []
        self.old_length=0 
        self.new_length=0
        timer_period = 1  # seconds
        self.timer = self.create_timer(timer_period, self.timer_callback)
ef get_topic_names_and_types():
    rclpy.init()

    node = rclpy.create_node("topic_monitor_node")
    topic_names_and_types = node.get_topic_names_and_types()

    for topic, types in topic_names_and_types.items():
        print("Topic:", topic)    def timer_callback(self):

        self.ros_topic_list = Node.get_topic_names_and_types()
        self.old_length
        self.new_length
        if len(self.ros_topic_list != self.old_length):
            for topic in self.ros_topic_list.items():
                print("Topic:", topic)

def main(args=None):
    rclpy.init(args=args)
    host_detector = Host_Detector()
    rclpy.spin(host_detector)



if __name__ == '__main__':
    main()
